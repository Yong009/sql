--문제1 --하나의 가게만 관리
--VARCHAR2 -> 영어는 1byte, 한글은 3byte
CREATE TABLE store(
store_id number(5) NOt NUll PRIMARY KEY,
stname VARCHAR2(15) NOT NULL,
address VARCHAR2(150) NOT NULL,
tel CHAR(13),
income number(6) check(income>=1000));

drop table store;
INSERT INTO store
VALUES(12345,'털보네슈퍼','대구시 중구 중앙대로 403','053-1234-1234', 1000);

select *
from store;

INSERT INTO store
VALUES(12346,'예담네슈퍼','대구시 중구 중앙대로 503','053-1234-1234', 1000);



--문제2
CREATE TABLE product(
product_prnumber number(4) PRIMARY KEY,
product_prname VARCHAR2(30),
product_price number(5) check(product_price>100),
product_stored CHAR(1) check(product_stored ='F' or product_stored= 'C'),
                          --product_stored IN ('F','C)
store_id number(5) ,
CONSTRAINT store_store_id_fk FOREIGN KEY(store_id) REFERENCES store(store_id));

INSERT INTO product
VALUES(1000, '귤', 2000, 'C', 12345);

INSERT INTO product
VALUES(2000, '사과',3000,'F',12346);

--3)회원
-->회원 ID , 회원 이름, 회원 pw, 가게 번호
--3-1) 회원 ID 15글자
--3-2) 회원 이름 한글 3글자
--3-3) 회원 비밀번호 10글자

CREATE table people(
people_id varchar2(15) PRIMARY KEY,
people_name varchar2(9) NOT NULL,
people_pw varchar2(10) NOT NULL,
store_id number(5) REFERENCES store(store_id)
);


--4) 장바구니
--> 주문번호, 상품번호, 물품 갯수, 가게 번호, 회원 번호, 배송 상태
--1) 주문 번호 영문 + 숫자 총 10글자
--2) 물품 갯수 한 자리 수
--3) 배송 상태는 준비(R), 배송중(D), 완료(F)
--단, 배송 상태의 경우에는 기본 값을 준비(R)로 가진다.

CREATE table bucket(
bucket_id varchar2(10) primary key,
product_prnumber number(4) REFERENCES product(product_prnumber),
bucket_product NUMBER(1) NOT NULL,
store_id number(5) REFERENCES store(store_id),
people_id varchar2(15) REFERENCES people(people_id),
bucket_delivery char(1) DEFAULT 'R' check( bucket_delivery IN ('R','D','F'))); 

select *
from bucket;



--문제1
select *
from store
where store_id = 12345;

--문제2
select S.stname, S.income, P.product_prname
from product P join store S on(S.store_id = P.store_id)
where S.store_id = 12345;

--문제3
select b.bucket_id, b.bucket_product 갯수, p.product_prname 상품명, 
b.bucket_product*p.product_price 주문금액, bucket_delivery "주문 상태"
from bucket b join product p on(b.product_prnumber = p.product_prnumber)
join store s on(s.store_id = p.store_id)
where s.stname = '털보네슈퍼';

select store_id
from store
where store_name ='털보네슈퍼';

SELECT b.bucket_id, b.bucket_product, p.product_prname, b.bucket_product*p.product_price "주문 금액", b.bucket_delivery "주문 상태"
from bucket b join product p
on(b.product_prnumber = p.product_prnumber)
where b.store_id = (select store_id
                  from store
                  where store_name ='털보네슈퍼');
--문제4
select b.bucket_id, b.bucket_product, p.product_prname, 
b.bucket_product*p.product_price, bucket_delivery
from bucket b join product p on(b.product_prnumber = p.product_prnumber)
join store s on(s.store_id = p.store_id)
where s.stname = '예담네슈퍼';

--문제5
select NVL(sum(b.bucket_product),0)
from bucket b join product p on(b.product_prnumber = p.product_prnumber)
where p.product_prname = '귤';

--View(보여주고 싶은 데이터)
--데이터 접근을 접속하는 사람에 따라서 차이를 둘 수 있다.
--복잡한 쿼리를 쉽게 쓴다.

CREATE VIEW empvu80
AS
    SELECT employee_id, last_name, salary
    FROM employees
    WHERE department_id = 80;
    
SELECT * 
FROM empvu80;

--뷰와 복사된 테이블 비교
SELECT *
FROM employees;
UPDATE employees
SET salary = salary * 1.1;

SELECT *
FROM empvu80;

SELECT *
FROM salvu80;

ROLLBACK;

CREATE VIEW salvu80
AS
SELECT employee_id ID_NUMBER, last_name NAME, salary*12 ANN_SALARY
FROM employees
WHERE department_id = 50;

SELECT * FROM salvu80;

--뷰 관련 데이터 딕셔너리 정보 확인
SELECT view_name, text
FROM user_views;

--뷰 수정하기
CREATE OR REPLACE VIEW salvu50
AS
    select employee_id ID_NUMBER, last_name NAME, salary*12 ANN_SALARY, hire_date
    FROM employees
    WHERE department_id = 80;

select *
FROM salvu50;

--SIMPLE VIEW ,, COMPLEX VIEW
--SIMPLE VIEW - 하나의 테이블로 만드는 VIEW
--COMPLEX VIEW - 하나 이상의 테이블로 만드는 VIEW(join)

CREATE OR REPLACE VIEW dept_sum_vu (name, minsal,maxsal, avgsal)
AS
    SELECT d.department_name, MIN(e.salary), MAX(e.salary), TRUNC(AVG(e.salary))
    FROM employees e join departments d
    on (e.department_id = d.department_id)
    GROUP BY d.department_name;
    
SELECT * FROM dept_sum_vu;

--WITH CHECK OPTION 사용
--WITH CHECK OPTION 미사용 경우
CREATE OR REPLACE VIEW empvu80
AS
    SELECT employee_id, last_name, salary, department_id
    FROM employees
    WHERE department_id = 80;

select * from empvu80;    
    
UPDATE empvu80
SET salary = 9800
WHERE employee_id = 176;

SELECT * FROM empvu80;

SELECT  employee_id, salary
FROM employees
WHERE employee_id = 176;

ROLLBACK;
CREATE OR REPLACE VIEW empvu80
AS
    SELECT employee_id, last_name, salary, department_id
    FROM employees
    WHERE department_id = 80
    WITH CHECK OPTION;

--범위 안의 데이터를 범위 밖으로 보내는 쿼리문 -> 안됨
UPDATE empvu80
SET department_id = 60
WHERE employee_id = 176;

--범위 안의 데이터를 범위 안에서만 변경 한 경우 -> 됨
UPDATE empvu80
SET salary = 9800
WHERE employee_id = 176;

ROLLBACK;
--WITH READ ONLY 옵션
CREATE OR REPLACE VIEW empvu80
AS
    SELECT employee_id, last_name, salary, department_id
    FROM employees
    WHERE department_id = 80
    WITH READ ONLY;
    
UPDATE empvu80
SET salary = 9800
WHERE employee_id = 176;

--뷰 삭제
SELECT view_name, text
FROM user_views;

DROP VIEW empvu80;

SELECT *
FROM empvu80;

--자동 index
DROp TABLE emp;

CREATE TABLE emp(
empno NUMBER(6) PRIMARY key,
ename varchar2(25) NOT NULL,
email varchar2(50)  NOT NULL UNIQUE,
phone_no CHAR(11) NOT NULL,
job VARCHAR2(20),
salary NUMBER(8),
deptno NUMBER(4));

SELECT constraint_name, constraint_type, search_condition
FROM user_constraints
WHERE table_name ='EMP';

SELECT table_name, index_name
FROM user_indexes
WHERE table_name = 'EMP';
                   
SELECT cc.column_name, c.constraint_name
FROM user_constraints c JOIN user_cons_columns cc
ON (c.constraint_name = cc.constraint_name)
where c.table_name = 'EMP';

--수동 INDEX 생성
CREATE INDEX emp_ename_idx on emp(ename);

SELECT table_name, index_name
FROM user_indexes
WHERE table_name = 'EMP';

--인덱스 삭제
--자동 인덱스 삭제
DROP INDEX SYS_C007128; --안됨
--수동 인덱스 삭제
DROP INDEX emp_ename_idx; --됨

