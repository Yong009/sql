SELECT *
FROM employees e, departments d --1)카테시안 프로덕트 발생 -> 모든 데이터 결과물을 출력한 다음.
WHERE e.department_id = d.department_id; --2)where절에 조건에 맞는 데이터만 추출한다.

--OUTER JOIN

select *
FROM departments LEFT OUTER JOIN employees
ON (departments.department_id = employees.department_id) --1) JOIN할 때 해당 조건에 맞는 데이터만 가지고 와서 데이터 추출
WHERE departments.department_id >50; --2) 부서번호가 50번 보다 큰 부서에 대해서만 데이터 추출.

--JOIN 과 ON은 한 세트
SELECT *
FROM employees e LEFT OUTER JOIN departments d
on e.department_id = d.department_id
WHERE e.department_id = d.department_id;

--OUTER JOIN
SELECT e.employee_id, e.last_name,e.department_id,d.department_id, d.department_name
FROM employees e LEFT OUTER JOIN departments d
ON (e.department_id = d.department_id);

--오라클
SELECT e.employee_id, e.last_name,e.department_id,d.department_id, d.department_name
FROM employees e, departments d
where e(+) = d;


SELECT e.employee_id, e.last_name,e.department_id,d.department_id, d.department_name
FROM employees e right OUTER JOIN departments d
ON (e.department_id = d.department_id);

SELECT e.employee_id, e.last_name,e.department_id,d.department_id, d.department_name
FROM employees e full OUTER JOIN departments d
ON (e.department_id = d.department_id);

--EQI JOIN
SELECT e.employee_id, e.last_name,e.department_id,d.department_id, d.department_name
FROM employees e JOIN departments d
ON (e.department_id = d.department_id);

--SELE JOIN (자기 안에서 매칭)
SELECT employee_id, last_name, manager_id
FROM employees;

SELECT e.employee_id, e.last_name, e.manager_id, m.last_name
FROM employees e JOIN employees m
ON (e.manager_id = m.employee_id);

SELECT e.employee_id, e.last_name, e.manager_id, m.last_name
FROM employees e LEFT OUTER JOIN employees m
ON (e.manager_id = m.employee_id);

--CROSS JOIN  --카테시안 프로덕트
SELECT last_name, department_name
FROM employees CROSS JOIN departments;

--NATURAL JOIN
SELECT *
FROM departments;
SELECT *
FROM locations;

SELECT department_id, department_name, location_id, city
FROM departments NATURAL JOIN locations;

SELECT employee_id ,department_name, department_id, last_name
FROM employees NATURAL JOIN departments;

--USING절
SELECT employee_id ,department_name, department_id, last_name
FROM employees JOIN departments
--employees.department_id = departments.department_id
USING (department_id);

--ON
SELECT employee_id ,department_name, employees.department_id, last_name
FROM employees JOIN departments
on(employees.department_id = departments.department_id);

--테이블 이름 별칭 사용
SELECT employee_id ,department_name, employees.department_id, last_name
FROM employees e JOIN departments d
on(employees.department_id = departments.department_id);

--3 way join
--EQI JOIN
SELECT e.employee_id, e.last_name, d.department_id, l.city
FROM employees e JOIN departments d ON(e.department_id = d.department_id)
JOIN locations l on(d.location_id = l.location_id);

--OUTER JOIN
SELECT e.employee_id, e.last_name, d.department_id, l.city
FROM employees e FULL OUTER JOIN departments d ON(e.department_id = d.department_id)
JOIN locations l on(d.location_id = l.location_id);

--JOIN 과 GROUP 함수의 콜라보
SELECT d.department_name, MIN(e.salary), MAX(e.salary), TRUNC(AVG(e.salary))
FROM employees e JOIN departments d
ON (e.department_id = d.department_id)
GROUP BY d.department_name;

--SUBQURRY--
--'Abel'인 사람의 급여보다 많은 사람의 사원 정보를 출력
SELECT salary
FROM employees
where last_name ='Abel';

SELECT *
FROM employees
WHERE salary> 11000;

SELECT *
FROM employees
WHERE salary > (SELECT salary
                FROM employees
                where last_name ='Abel');

--조건이 두개 인 서브쿼리
--MATOS인 사람의 직책(직업)과 같고 급여가 높은 사람의 정보를 출력 해라.
SELECT job_id
FROM employees
WHERE last_name = 'Matos';

SELECT salary
FROM employees
WHERE last_name = 'Matos';

SELECT last_name, job_id, salary
FROM employees
WHERE job_id =   (SELECT job_id
                  FROM employees
                  WHERE last_name = 'Matos')
AND salary > (SELECT salary
              FROM employees
              WHERE last_name = 'Matos');
              
--회사에서 급여가 제일 높은 사람의 정보 출력
SELECT last_name, job_id, salary
FROM employees
WHERE salary = (SELECT MAX(salary)
                FROM employees);

--20번 부서에 있는 인원보다 많은 부서의 정보를 출력
SELECT COUNT(*)
FROM employees
WHERE department_id = 20;

SELECT department_id, COUNT(*)
FROM employees
GROUP BY department_id
HAVING COUNT(*) >(SELECT COUNT(*)
                  FROM employees
                  WHERE department_id = 20);
                  
--60번 부서에서 최고 급여와 같은 급여를 받는 사람의 정보 출력
SELECT MAX(salary)
FROM employees
WHERE department_id = 60;
                  
select *
FROM employees
WHERE salary = (SELECT MAX(salary)
                FROM employees
                WHERE department_id = 60);
                
--오류
SELECT *
FROM employees
WHERE salary = ( SELECT salary+100
                 FROM employees
                 );

--부서별 최고 급여를 받는 사람과 같은 급여를 받는 사람의 정보를 출력
SELECT MAX(salary)
FROM employees
GROUP BY department_id;

SELECT last_name, job_id, salary
FROM employees
WHERE salary IN (SELECT MAX(salary)
                FROM employees
                GROUP BY department_id);

--ANY
--60번 부서의 구성원의 급여보다 많은 사람들의 정보 출력
SELECT salary
FROM employees
WHERE department_id = 60;

SELECT last_name, job_id, salary
FROM employees
WHERE Salary >ANY ( SELECT salary    -- 최솟값(4200)보다 큰거
                    FROM employees
                    WHERE department_id = 60);

SELECT last_name, job_id, salary
FROM employees
WHERE Salary <ANY ( SELECT salary    -- 최댓값(9000)보다 작은 거
                    FROM employees
                    WHERE department_id = 60);
                    
--all              
SELECT last_name, job_id, salary
FROM employees
WHERE Salary <all ( SELECT salary    -- 모든 조건 맞는 (4200보다 작은)    
                    FROM employees
                    WHERE department_id = 60);
 
                    
SELECT last_name, job_id, salary
FROM employees
WHERE Salary >all ( SELECT salary    -- 모든 조건 맞는 (9000보다 큰)  
                    FROM employees
                   WHERE department_id = 60);

--쌍비교
SELECT salary, NVL(commission_pct, -1)
FROM employes
WHERE department_id = 10;

                    
SELECT last_name, salary, commission_pct, department_id
FROM employees
WHERE (salary, NVL(commission_pct,-1)) IN
                                        (SELECT salary, NVL(commission_pct, -1)
                                            FROM employees
                                            WHERE department_id = 60)
AND department_id <> 60;

--비쌍비교
SELECT last_name, salary, commission_pct, department_id
FROM employees
WHERE salary IN                                 
                    (SELECT salary
                     FROM employees
                     WHERE department_id = 60)
                                 and  NVL(commission_pct,-1) IN 
                                     ( SELECT NVL(commission_pct, -1)
                                            FROM employees
                                            WHERE department_id = 60)
AND department_id <> 60;

--주의 사항
SELECT last_name, job_id, salary
FROM employees
WHERE salary IN (
                SELECT manager_id
                FROM employees
                where last_name = 'Mark'
                );

SELECT employee_id, last_name
FROM employees
WHERE employee_id NOT IN (
                        SELECT manager_id
                        FROM employees
                        );
                        
--문제1
SELECT location_id, street_address, city, state_province, country_name
from countries natural JOIN locations; 


--문제2
SELECT first_name, department_id, department_id, department_name
from employees  join departments 
USING (department_id);


--문제3
SELECT e.first_name, e.job_id, e.department_id, d.department_id, d.department_name, d.location_id, l.location_id
from employees e join departments d on(e.department_id = d.department_id) 
join locations l on(l.location_id = d.location_id)
where city = 'Toronto';


--문제4
SELECT e.first_name, e.employee_id, m.first_name, m.manager_id
from employees e join employees m on(e.employee_id = m.manager_id);

--문제5
SELECT e.last_name, e.employee_id, m.last_name, m.manager_id 
from employees e join employees m on(e.employee_id = m.manager_id)
order bY e.employee_id;

--문제6
select *
FROM employees e join employees m
on (e.department_id = m.department_id)
where e. employee_id <> m.employee_id;


--subqurry 1
SELECT department_id
from employees
where last_name = 'Zlotkey';

select last_name, hire_date
from employees
where department_id = (SELECT department_id
                        from employees
                        where last_name = 'Zlotkey');

--2
select avg(salary)
from employees;

select employee_id, last_name
from employees
where salary > (select avg(salary)
                from employees)
order by salary;

--3
select department_id
from employees
where last_name like '%u%';

select employee_id, last_name
from employees
where department_id IN 
                                    (select department_id
                                    from employees
                                    where last_name like '%u%');

--4
select last_name, department_id,  job_id 
from employees  
where department_id in (select department_id
                     from departments
                     where location_id = 1700);
                
--5
select last_name, salary 
from employees 
where manager_id In (select manager_id
                    from employees
                    where manager_id =100);

--6
select e.department_id, e.last_name, e.job_id,d.department_name
from employees e join departments d on(e.department_id = d.department_id)
where department_name = (select department_name
                           from departments
                           where department_name ='Executive');

--7
select avg(salary)
from employees;

select department_id
from employees
where last_name like '%u%';

select employee_id, last_name, salary, department_id
from employees
where salary >any (select avg(salary)
               from employees)
    and department_id in (select department_id
from employees
where last_name like '%u%');


